//====================================================================
// Copyright 2013-2015 ETH Zurich.
//
// Executes the DCA(+) analysis.
// Usage: ./main_analysis inputFileName
//
// Authors: Peter Staar (taa@zurich.ibm.com), IBM Research - Zurich
//          Urs Haehner (haehneru@itp.phys.ethz.ch), ETH Zurich
//====================================================================

#include <string>
#include <iostream>

#include "gitVersion.hpp"
#include "modules.hpp"
#include "include_files.h"
#include "type_definitions.h"

using namespace DCA;

int main(int argc, char** argv) {
  if (argc < 2) {
    std::cout << "Usage: " << argv[0] << " inputFileName" << std::endl;
    return -1;
  }

  std::string file_name(argv[1]);

  // Configure the calculation by selecting type definitions
  static const CLUSTER_SOLVER_NAMES CLUSTER_SOLVER_NAME = CT_AUX_CLUSTER_SOLVER;
  static const COMP_LIB::PARALLELIZATION_LIBRARY_NAMES
    PARALLELIZATION_LIBRARY_NAME = COMP_LIB::MPI_LIBRARY;

  using concurrency_type = COMP_LIB::parallelization<PARALLELIZATION_LIBRARY_NAME>;
  using parameters_type = Parameters<concurrency_type, model, CLUSTER_SOLVER_NAME>;
  using MOMS_type = DCA_data<parameters_type>;

  // Create the algorithms and parameters object from the input file
  concurrency_type concurrency(argc, argv);

  if (concurrency.id() == concurrency.first()) {
    std::cout << "\nAnalysis starting.\n"
              << "MPI-world set up: " << concurrency.number_of_processors()
              << " processes.\n" << std::endl;

    GitVersion::print();
    Modules::print();
  }

  parameters_type parameters(GitVersion::string(), concurrency);
  parameters.read_input_and_broadcast(file_name);
  parameters.update_model();
  parameters.update_domains();

  // Read in functions
  MOMS_type MOMS(parameters);
  MOMS.initialize();
  MOMS.read(parameters.get_directory() + parameters.get_output_file_name());

  // Compute susceptibility
  if (parameters.get_vertex_measurement_type() != NONE) {
    BSE_solver<parameters_type, MOMS_type> analysis_obj(parameters, MOMS);

    analysis_obj.calculate_susceptibilities_2();

    if (concurrency.id() == concurrency.last()) {
      std::cout << "\nProcessor " << concurrency.id() << " is writing data "
                << std::endl;
      analysis_obj.write();
    }
  }

  if (concurrency.id() == concurrency.last())
    std::cout << "\nAnalysis ending.\n" << std::endl;

  return 0;
}
