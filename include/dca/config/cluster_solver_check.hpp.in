// Copyright (C) 2009-2016 ETH Zurich
// Copyright (C) 2007?-2016 Center for Nanophase Materials Sciences, ORNL
// All rights reserved.
//
// See LICENSE.txt for terms of usage.
// See CITATION.txt for citation guidelines if you use this code for scientific publications.
//
// Author: Urs R. Haehner (haehneru@itp.phys.ethz.ch)
//
// This is a CMake generated header file.
// It configures the cluster solver check by selecting type defintions.

#ifndef DCA_CONFIG_CONFIG_CLUSTER_SOLVER_CHECK_HPP
#define DCA_CONFIG_CONFIG_CLUSTER_SOLVER_CHECK_HPP

#include "dca/config/haves_defines.hpp"
#include "dca/config/config_defines.hpp"
#include "dca/config/concurrency.hpp"    // defines Concurrency
#include "dca/config/lattice_model.hpp"  // defines Model
#include "dca/config/profiler.hpp"       // defines Profiler
#include "dca/config/rng.hpp"            // defines RandomNumberGenerator
#include "dca/config/walker_device.hpp"  // defines walker_device

#include "phys_library/DCA+_step/cluster_solver/cluster_solver_name.hpp"
constexpr DCA::ClusterSolverName solver_name = @DCA_CLUSTER_SOLVER_NAME@;

#include "dca/phys/parameters/parameters.hpp"
using ParametersType =
    dca::phys::params::Parameters<Concurrency, Profiler, Model, RandomNumberGenerator, solver_name>;

#include "phys_library/DCA+_data/DCA_data.h"
using DcaData = DCA::DCA_data<ParametersType>;

#include "phys_library/DCA+_step/cluster_solver/cluster_solver_exact_diagonalization_advanced/advanced_ed_cluster_solver.h"
using EdSolver =
    DCA::cluster_solver<DCA::ADVANCED_ED_CLUSTER_SOLVER, walker_device, ParametersType, DcaData>;

#include "@DCA_CLUSTER_SOLVER_INCLUDE@"
using ClusterSolverBaseType =
    DCA::cluster_solver<solver_name, walker_device, ParametersType, DcaData>;

#ifdef DCA_WITH_THREADED_SOLVER
#include "$DCA_THREADED_SOLVER_INCLUDE@"
using ClusterSolver = @DCA_THREADED_SOLVER_TYPE@;
#else
using ClusterSolver = ClusterSolverBaseType;
#endif  // DCA_WITH_THREADED_SOLVER

#include "phys_library/DCA+_loop/DCA_loop.hpp"
using DcaLoop = DCA::DCA_loop<ParametersType, DcaData, ClusterSolver>;

#endif  // DCA_CONFIG_CONFIG_CLUSTER_SOLVER_CHECK_HPP
