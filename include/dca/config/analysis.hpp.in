// Copyright (C) 2009-2016 ETH Zurich
// Copyright (C) 2007?-2016 Center for Nanophase Materials Sciences, ORNL
// All rights reserved.
//
// See LICENSE.txt for terms of usage.
// See CITATION.txt for citation guidelines if you use this code for scientific publications.
//
// Author: Urs R. Haehner (haehneru@itp.phys.ethz.ch)
//
// This is a CMake generated header file.
// It configures the DCA(+) analysis by selecting type defintions.

#ifndef DCA_CONFIG_CONFIG_ANALYSIS_HPP
#define DCA_CONFIG_CONFIG_ANALYSIS_HPP

#include "dca/config/haves_defines.hpp"
#include "dca/config/config_defines.hpp"
#include "dca/config/concurrency.hpp"    // defines Concurrency
#include "dca/config/threading.hpp"      // defines Threading
#include "dca/config/lattice_model.hpp"  // defines Model
#include "dca/config/profiler.hpp"       // defines Profiler

#include "dca/phys/dca_step/cluster_solver/cluster_solver_name.hpp"
constexpr dca::phys::solver::ClusterSolverName solver_name = @DCA_CLUSTER_SOLVER_NAME@;

#include "dca/phys/parameters/parameters.hpp"
using ParametersType = dca::phys::params::Parameters<Concurrency, Threading, Profiler, Model,
                                                     void /*RandomNumberGenerator*/, solver_name>;

#include "dca/phys/dca_data/dca_data.hpp"
using DcaDataType = dca::phys::DcaData<ParametersType>;

#include "dca/phys/dca_analysis/bse_solver/bse_solver.hpp"
using BseSolverType = dca::phys::analysis::BseSolver<ParametersType, DcaDataType>;

#endif  // DCA_CONFIG_CONFIG_ANALYSIS_HPP
