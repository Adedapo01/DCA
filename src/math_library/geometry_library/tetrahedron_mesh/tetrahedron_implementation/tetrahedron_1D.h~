//-*-C++-*-

#ifndef TETRAHEDRON_2D_H
#define TETRAHEDRON_2D_H

namespace MATH_ALGORITHMS
{
  /*!
   *  \ingroup TETRAHEDRON
   *
   *  \author  Peter Staar
   *  \brief   Implementation for a 2D tetrahedron.
   */
  template<>
  struct tetrahedron<2>
  {
  public:

    tetrahedron();
    ~tetrahedron();

    std::vector<double> compute_cm();

    void translate(std::vector<double> q);

    void plot       (Gnuplot& plot_obj);
    void plot_q_vecs(Gnuplot& plot_obj);

    template<typename scalartype>
    void update_gaussian_domain   (int& size, std::vector<scalartype>& weights, std::vector<std::vector<scalartype> >& k_vecs);

    template<typename scalartype>
    void update_tetrahedron_domain(int& size, std::vector<scalartype>& weights, std::vector<std::vector<scalartype> >& k_vecs);

    template<typename mesh_t>
    void do_recursion(std::vector<tetrahedron<2> >& tetrahedra, mesh_t& mesh);

  };

}

#endif
