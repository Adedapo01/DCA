//-*-C++-*-

#ifndef PARALLELIZATION_LIBRARY_TEMPLATE_H
#define PARALLELIZATION_LIBRARY_TEMPLATE_H

namespace COMP_LIB
{
  /*!
   *  \author Peter Staar
   */
  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  class parallelization : public print_on_shell_interface<LIBRARY>,
			  public packing_interface       <LIBRARY>,
                          public collective_sum_interface<LIBRARY>
  {

  public:

    parallelization(int argc, char *argv[]);
    ~parallelization();

  int id(); 

  int number_of_processors();
  
  int first();  
  int last ();

  void set_seed(long seed);
  long get_seed();
		
  template<typename domain_t>
  std::pair<int, int> get_bounds(domain_t& dmn);

  private:

    processor_grouping<LIBRARY> group;

    long SEED;
  };

  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  parallelization<LIBRARY>::parallelization(int argc, char *argv[]):
    print_on_shell_interface<LIBRARY>(group),
    packing_interface       <LIBRARY>(group),
    collective_sum_interface<LIBRARY>(group),
    
    SEED(0)
  {}

  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  parallelization<LIBRARY>::~parallelization()
  {}

  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  int parallelization<LIBRARY>::id()
  {
    assert(group.get_id()>-1);
    return group.get_id();
  }
  
  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  int parallelization<LIBRARY>::number_of_processors() 
  {
    assert(group.get_Nr_threads()>-1);
    return group.get_Nr_threads();
  }
  
  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  int parallelization<LIBRARY>::first() 
  {
    return group.first();
  }
  
  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  int parallelization<LIBRARY>::last() 
  {
    return group.last();
  } 
  
  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  long parallelization<LIBRARY>::get_seed()
  {
    return SEED;
  }

  template<PARALLELIZATION_LIBRARY_NAMES LIBRARY>
  void parallelization<LIBRARY>::set_seed(long seed)
  {
    srand(seed);
    
    for(int l=0; l<=id(); l++)
      SEED = rand();
  }
  
}

#endif
