//-*-C++-*-

#ifndef COLLECTIVE_SUM_INTERFACE_MPI_H
#define COLLECTIVE_SUM_INTERFACE_MPI_H

namespace COMP_LIB
{
  /*!
   *  \author Peter Staar
   */
  template<>
  class collective_sum_interface<MPI_LIBRARY>
  {
  public:

    collective_sum_interface(processor_grouping<MPI_LIBRARY>& grouping_ref);
    ~collective_sum_interface();

    template<typename scalar_type>
    void sum(scalar_type& value);

    template<typename scalar_type>
    void sum(std::vector<scalar_type>& m);

    template<typename scalartype>
    void sum(std::map<std::string, std::vector<scalartype> >& m);

    template<typename scalar_type, class domain>
    void sum(function<scalar_type, domain>& f);

    template<typename scalar_type, class domain>
    void sum(function<scalar_type, domain>& f, function<scalar_type, domain>& f_target);

    template<typename scalar_type, class domain>
    void sum(function<std::vector<scalar_type>, domain>& f);

    template<typename scalar_type>
    void sum(LIN_ALG::vector<scalar_type, LIN_ALG::CPU>& f);

    template<typename scalar_type>
    void sum(LIN_ALG::matrix<scalar_type, LIN_ALG::CPU>& f);

    template<typename some_type>
    void sum_and_average(some_type& obj, int size);

  private:

    processor_grouping<MPI_LIBRARY>& grouping;
  };

  collective_sum_interface<MPI_LIBRARY>::collective_sum_interface(processor_grouping<MPI_LIBRARY>& grouping_ref):
    grouping(grouping_ref)
  {}

  collective_sum_interface<MPI_LIBRARY>::~collective_sum_interface()
  {}

}

#endif
