//-*-C++-*-

#ifndef SHOW_FUNCTION_H
#define SHOW_FUNCTION_H

class SHOW
{
 public:

  template<typename scalar_type>
  static void plot_points(std::vector<scalar_type> x, std::vector<scalar_type> y);
 
  template<typename scalar_type>
  static void plot_points(Gnuplot& plot_obj, std::vector<scalar_type> x, std::vector<scalar_type> y);

  template<typename scalar_type>
  static void plot_points(std::vector<std::vector<scalar_type> >& elements, bool save_figure=false);

  template<typename scalar_type>
  static void plot_points(Gnuplot& plot_obj, std::vector<std::vector<scalar_type> >& elements);
   
  template<typename scalar_type, typename dmn_type>
  static void execute(function<scalar_type, dmn_type>& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void plot_data(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure=false);
  
  template<typename scalar_type, typename dmn_type>
  static void plot_data(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void plot_data(Gnuplot& plot_obj, function<scalar_type, dmn_0<dmn_type> >& f);

  template<typename scalar_type, typename dmn_type>
  static void plot_data(Gnuplot& plot_obj, function<std::complex<scalar_type>, dmn_0<dmn_type> >& f);

  template<typename scalar_type, typename dmn_type>
  static void plot_data(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, 
			function<std::complex<scalar_type>, dmn_0<dmn_type> >& g, 
			bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void execute(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void execute(Gnuplot& plot_obj, function<scalar_type, dmn_0<dmn_type> >& f);

  template<typename scalar_type, typename dmn_type>
  static void execute(Gnuplot& plot_obj, function<std::complex<scalar_type>, dmn_0<dmn_type> >& f);

  template<typename scalar_type, typename dmn_type>
  static void execute(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
  static void execute(function<scalar_type, dmn_2<dmn_type_0, dmn_type_1> >& f, int n, bool save_figure=false);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
  static void execute(function<std::complex<scalar_type>, dmn_2<dmn_type_0, dmn_type_1> >& f, int n, bool save_figure=false);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
  static void execute(function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
  static void execute(function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f,
		      function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& g);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
  static void execute(function<std::complex<scalar_type>, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f);

  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
  static void execute(function<scalar_type, dmn_0<dmn_type_0> >& f, 
		      function<scalar_type, dmn_0<dmn_type_1> >& g, 
		      bool save_figure=false);
  
  template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
  static void execute(function<std::complex<scalar_type>, dmn_0<dmn_type_0> >& f,
		      function<std::complex<scalar_type>, dmn_0<dmn_type_1> >& g,
		      bool save_figure=false);

//   template<typename scalar_type, typename dmn_type>
//   static void contour(function<scalar_type, dmn_type>& f, bool save_figure=false);
		      
  template<typename scalar_type, typename dmn_type>
  static void contour(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure=false);
		      
  template<typename scalar_type, typename dmn_type>
  static void contour(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void heatmap(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type, typename dmn_type>
  static void heatmap(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure=false);

  template<typename scalar_type>
  static void heatmap(std::vector<scalar_type> x, std::vector<scalar_type> y, std::vector<scalar_type> z, std::string name="no-name");

};

template<typename scalar_type>
void SHOW::plot_points(std::vector<scalar_type> x, std::vector<scalar_type> y)
{
#ifdef ALLOW_GNUPLOT

  Gnuplot plot_obj("points");
  
  plot_obj.plot_xy(x, y, "no-name");

  plot_obj.showonscreen();

#endif
}

template<typename scalar_type>
void SHOW::plot_points(Gnuplot& plot_obj, std::vector<scalar_type> x, std::vector<scalar_type> y)
{
#ifdef ALLOW_GNUPLOT

  plot_obj.plot_xy(x, y, "no-name");

#endif
}

template<typename scalar_type>
void SHOW::plot_points(std::vector<std::vector<scalar_type> >& elements, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  assert(elements[0].size()==2);

  std::vector<double> x(0);
  std::vector<double> y(0);

  for(size_t i=0; i<elements.size(); i++){
    x.push_back(elements[i][0]);
    y.push_back(elements[i][1]); 

    //cout << x[i] << "\t" << y[i] << endl;
  }

  Gnuplot plot_obj("points");
  
  plot_obj.plot_xy(x, y, "no-name");

  plot_obj.showonscreen();

  //assert(false);
#endif
}

template<typename scalar_type>
void SHOW::plot_points(Gnuplot& plot_obj, std::vector<std::vector<scalar_type> >& elements)
{
#ifdef ALLOW_GNUPLOT

  assert(elements[0].size()==2);

  std::vector<double> x(0);
  std::vector<double> y(0);

  for(size_t i=0; i<elements.size(); i++){
    x.push_back(elements[i][0]);
    y.push_back(elements[i][1]); 

    //cout << x[i] << "\t" << y[i] << endl;
  }
  
  plot_obj.plot_xy(x, y);

  plot_obj.showonscreen();

  //assert(false);

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::plot_data(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double> x(0);
  std::vector<double> y(0);

  for(int i=0; i<f.size(); i++){
    x.push_back(i/double(f.size()));
    y.push_back(f(i)); 
  }

  Gnuplot plot_obj("lines");
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::plot_data(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double> x(0);
  std::vector<double> y(0);
  std::vector<double> z(0);

  for(int i=0; i<f.size(); i++){
    x.push_back(i/double(f.size()));
    y.push_back(real(f(i))); 
    z.push_back(imag(f(i))); 
  }

  Gnuplot plot_obj("lines");
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());
  plot_obj.plot_xy(x, z, f.get_name());

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::plot_data(Gnuplot& plot_obj, function<scalar_type, dmn_0<dmn_type> >& f)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double> x(0);
  std::vector<double> y(0);

  for(int i=0; i<f.size(); i++){
    x.push_back(i/double(f.size()));
    y.push_back(f(i)); 
  }

  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::plot_data(Gnuplot& plot_obj, function<std::complex<scalar_type>, dmn_0<dmn_type> >& f)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double> x(0);
  std::vector<double> y(0);
  std::vector<double> z(0);

  for(int i=0; i<f.size(); i++){
    x.push_back(i/double(f.size()));
    y.push_back(real(f(i))); 
    z.push_back(imag(f(i))); 
  }

  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());
  plot_obj.plot_xy(x, z, f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::plot_data(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, 
		     function<std::complex<scalar_type>, dmn_0<dmn_type> >& g, 
		     bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double> x(0);
  std::vector<double> f_re(0);
  std::vector<double> f_im(0);
  std::vector<double> g_re(0);
  std::vector<double> g_im(0);

  for(int i=0; i<f.size(); i++){
    x.push_back(i/double(f.size()));
    f_re.push_back(real(f(i))); 
    f_im.push_back(imag(f(i))); 
    g_re.push_back(real(g(i))); 
    g_im.push_back(imag(g(i))); 
  }

  Gnuplot plot_obj("points");
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, f_re, f.get_name());
  plot_obj.plot_xy(x, f_im, f.get_name());
  plot_obj.plot_xy(x, g_re, g.get_name());
  plot_obj.plot_xy(x, g_im, g.get_name());

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}


template<typename scalar_type, typename dmn_type>
void SHOW::execute(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x = dmn_type::get_elements();

  std::vector<double> y(0);
  for(int i=0; i<f.size(); i++)
    y.push_back(f(i)); 
 
  //Gnuplot plot_obj("lines");
  Gnuplot plot_obj("points");
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::execute(Gnuplot& plot_obj, function<scalar_type, dmn_0<dmn_type> >& f)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x = dmn_type::get_elements();

  std::vector<double> y(0);
  for(int i=0; i<f.size(); i++)
    y.push_back(f(i)); 
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y, f.get_name());

  plot_obj.showonscreen();

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::execute(Gnuplot& plot_obj, function<std::complex<scalar_type>, dmn_0<dmn_type> >& f)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x = dmn_type::get_elements();

  std::vector<double> y_re(0);
  for(int i=0; i<f.size(); i++)
    y_re.push_back(real(f(i))); 

  std::vector<double> y_im(0);
  for(int i=0; i<f.size(); i++)
    y_im.push_back(imag(f(i))); 
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y_re, "Re["+f.get_name()+"]");
  plot_obj.plot_xy(x, y_im, "Im["+f.get_name()+"]");

  plot_obj.showonscreen();

#endif
}


template<typename scalar_type, typename dmn_type>
void SHOW::execute(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f,
		   bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x = dmn_type::get_elements();

  std::vector<double> y_re(0);
  std::vector<double> y_im(0);
  for(int i=0; i<f.size(); i++)
    {
      y_re.push_back(real(f(i))); 
      y_im.push_back(imag(f(i))); 
    }

  Gnuplot plot_obj("lines");
  
  plot_obj.set_xlabel(dmn_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x, y_re, "");
  plot_obj.plot_xy(x, y_im, "");

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
void SHOW::execute(function<scalar_type, dmn_2<dmn_type_0, dmn_type_1> >& f, int n, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  Gnuplot plot_obj("lines");

  std::vector<double> x;
  if(n==0)
    {
      //x = dmn_type_0::get_elements();
      plot_obj.set_xlabel(dmn_type_0::get_name());
    }
  else
    {
      x = dmn_type_1::get_elements();
      plot_obj.set_xlabel(dmn_type_1::get_name());
    }
  
  plot_obj.set_ylabel(f.get_name());

  if(n==0)
    {
      for(int j=0; j<f[1]; j++)
	{
	  std::vector<double> y_re(0);
	  //std::vector<double> y_im(0);
	  for(int i=0; i<f[0]; i++)
	    {
	      y_re.push_back((f(i,j))); 
	      //y_im.push_back(imag(f(i,j))); 
	    }
	  
	  plot_obj.plot_xy(x, y_re, "");
	  //plot_obj.plot_xy(x, y_im, "");
	}
    }
  else
    {
      for(int j=0; j<f[0]; j++)
	{
	  std::vector<double> y_re(0);
	  //std::vector<double> y_im(0);
	  for(int i=0; i<f[1]; i++)
	    {
	      y_re.push_back((f(j,i))); 
	      //y_im.push_back(imag(f(j,i))); 
	    }
	  
	  plot_obj.plot_xy(x, y_re, "");
	  //plot_obj.plot_xy(x, y_im, "");
	}
    }

  plot_obj.showonscreen();
  
  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
void SHOW::execute(function<std::complex<scalar_type>, dmn_2<dmn_type_0, dmn_type_1> >& f, int n, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  Gnuplot plot_obj("lines");

  std::vector<double> x;
  if(n==0)
    {
      //x = dmn_type_0::get_elements();
      plot_obj.set_xlabel(dmn_type_0::get_name());
    }
  else
    {
      x = dmn_type_1::get_elements();
      plot_obj.set_xlabel(dmn_type_1::get_name());
    }
  
  plot_obj.set_ylabel(f.get_name());

  if(n==0)
    {
      for(int j=0; j<f[1]; j++)
	{
	  std::vector<double> y_re(0);
	  std::vector<double> y_im(0);
	  for(int i=0; i<f[0]; i++)
	    {
	      y_re.push_back(real(f(i,j))); 
	      y_im.push_back(imag(f(i,j))); 
	    }
	  
	  plot_obj.plot_xy(x, y_re, "");
	  plot_obj.plot_xy(x, y_im, "");
	}
    }
  else
    {
      for(int j=0; j<f[0]; j++)
	{
	  std::vector<double> y_re(0);
	  std::vector<double> y_im(0);
	  for(int i=0; i<f[1]; i++)
	    {
	      y_re.push_back(real(f(j,i))); 
	      y_im.push_back(imag(f(j,i))); 
	    }
	  
	  plot_obj.plot_xy(x, y_re, "");
	  plot_obj.plot_xy(x, y_im, "");
	}
    }

  plot_obj.showonscreen();
  
  if(save_figure)
    plot_obj.savetops(f.get_name());

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
void SHOW::execute(function<std::complex<scalar_type>, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f)
{
#ifdef ALLOW_GNUPLOT
  //cout << __FUNCTION__ << endl;

  std::vector<double>& x_points = dmn_type_2::get_elements();

  Gnuplot plot_obj("linespoints");

  plot_obj.set_xlabel(dmn_type_2::parameter_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  for(int j=0; j<dmn_type_1::dmn_size(); j++){

    std::vector<double> x(0);
    std::vector<double> y_re(0);
    std::vector<double> y_im(0);

    for(int i=std::max(dmn_type_2::dmn_size()/2-32,0); i<std::min(dmn_type_2::dmn_size()/2+32, dmn_type_2::dmn_size()); i++){
      //for(int i=0; i<dmn_type_2::dmn_size(); i++){
      x.push_back(x_points[i]);
      
      y_re.push_back(real(f(0,0,j,i))); 
      y_im.push_back(imag(f(0,0,j,i))); 
    }
    
    plot_obj.plot_xy(x, y_re, "");
    plot_obj.plot_xy(x, y_im, "");
  }

  plot_obj.showonscreen();

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
void SHOW::execute(function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f)
{
#ifdef ALLOW_GNUPLOT
  //cout << __FUNCTION__ << endl;

  std::vector<double>& x_points = dmn_type_2::get_elements();

  //Gnuplot plot_obj("linespoints");
  Gnuplot plot_obj("lines");

  plot_obj.set_xlabel(dmn_type_2::parameter_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  for(int j=0; j<dmn_type_1::dmn_size(); j++){

    std::vector<double> x(0);
    std::vector<double> y_re(0);
    
    for(int i=0; i<dmn_type_2::dmn_size(); i++){
      x.push_back(x_points[i]);
      
      y_re.push_back(f(0,0,j,i)); 
    }
    
    plot_obj.plot_xy(x, y_re, "");
  }

  plot_obj.showonscreen();

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1, typename dmn_type_2>
void SHOW::execute(function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& f,
		   function<scalar_type, dmn_4<dmn_type_0, dmn_type_0, dmn_type_1, dmn_type_2> >& g)
{
#ifdef ALLOW_GNUPLOT

  //cout << __FUNCTION__ << endl;

  std::vector<double>& x_points = dmn_type_2::get_elements();

  //Gnuplot plot_obj("linespoints");
  Gnuplot plot_obj("lines");

  plot_obj.set_xlabel(dmn_type_2::parameter_type::get_name());
  plot_obj.set_ylabel(f.get_name());
  
  for(int j=0; j<dmn_type_1::dmn_size(); j++){

    std::vector<double> x(0);
    std::vector<double> y_re_1(0);
    std::vector<double> y_re_2(0);
    
    for(int i=0; i<dmn_type_2::dmn_size(); i++){
      x.push_back(x_points[i]);
      
      y_re_1.push_back(f(0,0,j,i)); 
      y_re_2.push_back(g(0,0,j,i)); 
    }
    
    plot_obj.set_style("lines");
    plot_obj.plot_xy(x, y_re_1, f.get_name());
    plot_obj.set_style("points");
    plot_obj.plot_xy(x, y_re_2, g.get_name());
  }

  plot_obj.showonscreen();

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
void SHOW::execute(function<scalar_type, dmn_0<dmn_type_0> >& f,
		   function<scalar_type, dmn_0<dmn_type_1> >& g,
		   bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x_0 = dmn_type_0::get_elements();
  std::vector<double>& x_1 = dmn_type_1::get_elements();
  
  std::vector<double> f_re(0);
  std::vector<double> g_re(0);

  for(int i=0; i<f.size(); i++)
    f_re.push_back((f(i))); 

  for(int i=0; i<g.size(); i++)
    g_re.push_back((g(i))); 

  Gnuplot plot_obj("points");
  
  plot_obj.set_xlabel(dmn_type_0::get_name());
  //plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x_0, f_re, f.get_name());
  plot_obj.plot_xy(x_1, g_re, g.get_name());

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name()); 

#endif
}

template<typename scalar_type, typename dmn_type_0, typename dmn_type_1>
void SHOW::execute(function<std::complex<scalar_type>, dmn_0<dmn_type_0> >& f,
		   function<std::complex<scalar_type>, dmn_0<dmn_type_1> >& g,
		   bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<double>& x_0 = dmn_type_0::get_elements();
  std::vector<double>& x_1 = dmn_type_1::get_elements();

  std::vector<double> f_re(0);
  std::vector<double> f_im(0);

  for(int i=0; i<f.size(); i++)
    {
      f_re.push_back(real(f(i))); 
      f_im.push_back(imag(f(i))); 
    }

  std::vector<double> g_re(0);
  std::vector<double> g_im(0);

  for(int i=0; i<g.size(); i++)
    {
      g_re.push_back(real(g(i))); 
      g_im.push_back(imag(g(i))); 
    }

  Gnuplot plot_obj("lines");
  //Gnuplot plot_obj("points");
  
  plot_obj.set_xlabel(dmn_type_0::get_name());
  //plot_obj.set_ylabel(f.get_name());
  
  plot_obj.plot_xy(x_0, f_re, "Re["+f.get_name()+"]");
  plot_obj.plot_xy(x_0, f_im, "Im["+f.get_name()+"]");

  plot_obj.plot_xy(x_1, g_re, "Re["+g.get_name()+"]");
  plot_obj.plot_xy(x_1, g_im, "Im["+g.get_name()+"]");

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name()); 

#endif
}


template<typename scalar_type, typename dmn_type>
void SHOW::contour(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<std::vector<double> >& vecs = dmn_type::get_elements();

  std::vector<double> x(0);
  std::vector<double> y(0);
  std::vector<double> z(0);

  for(int i=0; i<f.size(); i++)
    {
      x.push_back(vecs[i][0]); 
      y.push_back(vecs[i][1]); 
      z.push_back(f(i));
    }
  
  Gnuplot plot_obj("lines");

  plot_obj.plot_xyz(x, y, z, f.get_name());

  plot_obj << "set dgrid3d  100,100,16";

  plot_obj.set_isosamples(10).set_contour("base");  

  plot_obj << "set dgrid3d";
  plot_obj << "unset surface";
  plot_obj << "set view map";
  plot_obj << "set cntrparam levels 20";
  plot_obj.replot();

  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name()); 

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::heatmap(function<scalar_type, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  std::vector<std::vector<double> >& vecs = dmn_type::get_elements();

  std::vector<double> x(0);
  std::vector<double> y(0);
  std::vector<double> z(0);

  for(int i=0; i<f.size(); i++)
    {
      x.push_back(vecs[i][0]); 
      y.push_back(vecs[i][1]); 
      z.push_back(f(i));
    }
  
  Gnuplot plot_obj("lines");

  plot_obj << "set dgrid3d  100,100,16";
  plot_obj << "set pm3d at b";

  plot_obj.plot_xyz(x, y, z, f.get_name());

  plot_obj << "unset surface";
  plot_obj << "set pm3d map";
  
  //plot_obj << "set palette gray";
  
  plot_obj.replot();
  
  plot_obj.showonscreen();

  if(save_figure)
    plot_obj.savetops(f.get_name()); 

#endif
}

template<typename scalar_type, typename dmn_type>
void SHOW::heatmap(function<std::complex<scalar_type>, dmn_0<dmn_type> >& f, bool save_figure)
{
#ifdef ALLOW_GNUPLOT

  function<scalar_type, dmn_0<dmn_type> > f_re("Re["+f.get_name()+"]");
  function<scalar_type, dmn_0<dmn_type> > f_im("Im["+f.get_name()+"]");

  for(int i=0; i<f.size(); i++)
    {
      f_re(i) = real(f(i));
      f_im(i) = imag(f(i));
    }

  heatmap(f_re);
  heatmap(f_im);

#endif
}
	     
template<typename scalar_type>
void SHOW::heatmap(std::vector<scalar_type> x, std::vector<scalar_type> y, std::vector<scalar_type> z, std::string name)
{
#ifdef ALLOW_GNUPLOT

  Gnuplot plot_obj("lines");

  plot_obj << "set dgrid3d  100,100,16";
  plot_obj << "set pm3d at b";

  plot_obj.plot_xyz(x, y, z, name);

  plot_obj << "unset surface";
  plot_obj << "set pm3d map";
  
  //plot_obj << "set palette gray";
  
  plot_obj.replot();
  
  plot_obj.showonscreen();

#endif
}

#endif
