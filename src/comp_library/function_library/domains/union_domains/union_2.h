//-*-C++-*-

/* 
 * 	 This is a C++ file generated by write_union_domains.py 
 *
 * 	 author: Peter Staar  
 */ 


#ifndef UNION_2_H_
#define UNION_2_H_

#include "domain.h"   
#include "type_list.h"   
#include "type_list_definitions.h"   

using namespace TL; 


template< typename domain_0_t,
	  typename domain_1_t>
class union_2 : public domain 
{

public:
 
 	typedef typename domain_0_t::this_type domain_typelist_0;
	typedef typename domain_1_t::this_type domain_typelist_1;
	
	typedef typename Append<domain_typelist_0, domain_typelist_1>::Result  this_type;
 
 	union_2();
 
 	void reset(); 
 
 	int operator()(int l);

protected:

	domain_0_t domain_0;
	domain_1_t domain_1;

};



template< typename domain_0_t,
		  typename domain_1_t>
union_2<domain_0_t, domain_1_t>::union_2():
	domain(),
	domain_0(),
	domain_1()
{

	size = domain_0.get_size() + domain_1.get_size();
	
	branch_domain_sizes.push_back(size);
	leaf_domain_sizes.push_back(size);
}

template< typename domain_0_t,
		  typename domain_1_t>
void union_2<domain_0_t, domain_1_t>::reset()
{
domain::reset();

domain_0.reset();
domain_1.reset();


	size = domain_0.get_size() + domain_1.get_size();
	
branch_domain_sizes.resize(0);
branch_domain_sizes.push_back(size);

leaf_domain_sizes.resize(0);
leaf_domain_sizes.push_back(size);
}

template< typename domain_0_t,
		  typename domain_1_t>
int union_2<domain_0_t, domain_1_t>::operator()(int l)
{
	 assert(l>=0 && l<size);
	 return l;
}

#endif
