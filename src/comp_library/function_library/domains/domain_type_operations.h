//-*-C++-*-

/*
 * 	 This is a C++ file generated by write_domain_type_operation.py
 *
 * 	 author: Peter Staar
 */

#include "type_list_definitions.h"


#ifndef DOMAIN_TYPE_OPERATIONS_H_
#define DOMAIN_TYPE_OPERATIONS_H_

namespace TL
{



/****************************************
***           ERASE                   ***
*****************************************/



template<class T0, class T1>
struct Erase {};

template <class T0 , class T1 >
struct Erase<dmn_2< T0, T1>, T0> {
typedef dmn_1<T1> Result;
};

template <class T0 , class T1 >
struct Erase<dmn_2< T0, T1>, T1> {
typedef dmn_1<T0> Result;
};

template <class T0 , class T1 , class T2 >
struct Erase<dmn_3< T0, T1, T2>, T0> {
typedef dmn_2<T1, T2> Result;
};

template <class T0 , class T1 , class T2 >
struct Erase<dmn_3< T0, T1, T2>, T1> {
typedef dmn_2<T0, T2> Result;
};

template <class T0 , class T1 , class T2 >
struct Erase<dmn_3< T0, T1, T2>, T2> {
typedef dmn_2<T0, T1> Result;
};

template <class T0 , class T1 , class T2 , class T3 >
struct Erase<dmn_4< T0, T1, T2, T3>, T0> {
typedef dmn_3<T1, T2, T3> Result;
};

template <class T0 , class T1 , class T2 , class T3 >
struct Erase<dmn_4< T0, T1, T2, T3>, T1> {
typedef dmn_3<T0, T2, T3> Result;
};

template <class T0 , class T1 , class T2 , class T3 >
struct Erase<dmn_4< T0, T1, T2, T3>, T2> {
typedef dmn_3<T0, T1, T3> Result;
};

template <class T0 , class T1 , class T2 , class T3 >
struct Erase<dmn_4< T0, T1, T2, T3>, T3> {
typedef dmn_3<T0, T1, T2> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 >
struct Erase<dmn_5< T0, T1, T2, T3, T4>, T0> {
typedef dmn_4<T1, T2, T3, T4> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 >
struct Erase<dmn_5< T0, T1, T2, T3, T4>, T1> {
typedef dmn_4<T0, T2, T3, T4> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 >
struct Erase<dmn_5< T0, T1, T2, T3, T4>, T2> {
typedef dmn_4<T0, T1, T3, T4> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 >
struct Erase<dmn_5< T0, T1, T2, T3, T4>, T3> {
typedef dmn_4<T0, T1, T2, T4> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 >
struct Erase<dmn_5< T0, T1, T2, T3, T4>, T4> {
typedef dmn_4<T0, T1, T2, T3> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T0> {
typedef dmn_5<T1, T2, T3, T4, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T1> {
typedef dmn_5<T0, T2, T3, T4, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T2> {
typedef dmn_5<T0, T1, T3, T4, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T3> {
typedef dmn_5<T0, T1, T2, T4, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T4> {
typedef dmn_5<T0, T1, T2, T3, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
struct Erase<dmn_6< T0, T1, T2, T3, T4, T5>, T5> {
typedef dmn_5<T0, T1, T2, T3, T4> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T0> {
typedef dmn_6<T1, T2, T3, T4, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T1> {
typedef dmn_6<T0, T2, T3, T4, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T2> {
typedef dmn_6<T0, T1, T3, T4, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T3> {
typedef dmn_6<T0, T1, T2, T4, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T4> {
typedef dmn_6<T0, T1, T2, T3, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T5> {
typedef dmn_6<T0, T1, T2, T3, T4, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
struct Erase<dmn_7< T0, T1, T2, T3, T4, T5, T6>, T6> {
typedef dmn_6<T0, T1, T2, T3, T4, T5> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T0> {
typedef dmn_7<T1, T2, T3, T4, T5, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T1> {
typedef dmn_7<T0, T2, T3, T4, T5, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T2> {
typedef dmn_7<T0, T1, T3, T4, T5, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T3> {
typedef dmn_7<T0, T1, T2, T4, T5, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T4> {
typedef dmn_7<T0, T1, T2, T3, T5, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T5> {
typedef dmn_7<T0, T1, T2, T3, T4, T6, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T6> {
typedef dmn_7<T0, T1, T2, T3, T4, T5, T7> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
struct Erase<dmn_8< T0, T1, T2, T3, T4, T5, T6, T7>, T7> {
typedef dmn_7<T0, T1, T2, T3, T4, T5, T6> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T0> {
typedef dmn_8<T1, T2, T3, T4, T5, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T1> {
typedef dmn_8<T0, T2, T3, T4, T5, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T2> {
typedef dmn_8<T0, T1, T3, T4, T5, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T3> {
typedef dmn_8<T0, T1, T2, T4, T5, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T4> {
typedef dmn_8<T0, T1, T2, T3, T5, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T5> {
typedef dmn_8<T0, T1, T2, T3, T4, T6, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T6> {
typedef dmn_8<T0, T1, T2, T3, T4, T5, T7, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T7> {
typedef dmn_8<T0, T1, T2, T3, T4, T5, T6, T8> Result;
};

template <class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
struct Erase<dmn_9< T0, T1, T2, T3, T4, T5, T6, T7, T8>, T8> {
typedef dmn_8<T0, T1, T2, T3, T4, T5, T6, T7> Result;
};




/****************************************
***           SWAP-COND               ***
*****************************************/



template <class dmn, class T1, class T2, int N>
struct SWAP_COND {
  typedef dmn Result;
};


template <class T1,class T2>
struct SWAP_COND<dmn_0<T1>, T1, T2, 0> {
  typedef dmn_0<T2> Result;
};


template <class T0, class T1,class T2>
struct SWAP_COND<dmn_0<T0>, dmn_0<T1>, dmn_0<T2>, 0> {
  typedef dmn_0<T0> Result;
};


template <class T1,class T2>
struct SWAP_COND<dmn_0<T1>, dmn_0<T1>, dmn_0<T2>, 0> {
  typedef dmn_0<T2> Result;
};


template <class D0,  class T1, class T2, int N>
 struct SWAP_COND<dmn_1< D0>,  T1, T2, N> {

 const static int LENGTH_0 = N;

typedef dmn_1<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result   > Result;
};

template <class D0, class D1,  class T1, class T2, int N>
 struct SWAP_COND<dmn_2< D0, D1>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;

typedef dmn_2<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result   > Result;
};

template <class D0, class D1, class D2,  class T1, class T2, int N>
 struct SWAP_COND<dmn_3< D0, D1, D2>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;

typedef dmn_3<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3,  class T1, class T2, int N>
 struct SWAP_COND<dmn_4< D0, D1, D2, D3>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;

typedef dmn_4<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4,  class T1, class T2, int N>
 struct SWAP_COND<dmn_5< D0, D1, D2, D3, D4>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;
 const static int LENGTH_4 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value;

typedef dmn_5<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result,
  typename SWAP_COND<D4, T1, T2, LENGTH_4>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5,  class T1, class T2, int N>
 struct SWAP_COND<dmn_6< D0, D1, D2, D3, D4, D5>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;
 const static int LENGTH_4 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value;
 const static int LENGTH_5 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value;

typedef dmn_6<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result,
  typename SWAP_COND<D4, T1, T2, LENGTH_4>::Result,
  typename SWAP_COND<D5, T1, T2, LENGTH_5>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6,  class T1, class T2, int N>
 struct SWAP_COND<dmn_7< D0, D1, D2, D3, D4, D5, D6>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;
 const static int LENGTH_4 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value;
 const static int LENGTH_5 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value;
 const static int LENGTH_6 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value;

typedef dmn_7<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result,
  typename SWAP_COND<D4, T1, T2, LENGTH_4>::Result,
  typename SWAP_COND<D5, T1, T2, LENGTH_5>::Result,
  typename SWAP_COND<D6, T1, T2, LENGTH_6>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6, class D7,  class T1, class T2, int N>
 struct SWAP_COND<dmn_8< D0, D1, D2, D3, D4, D5, D6, D7>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;
 const static int LENGTH_4 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value;
 const static int LENGTH_5 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value;
 const static int LENGTH_6 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value;
 const static int LENGTH_7 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value + TL::NumberOf<typename D6::this_type, T1>::value;

typedef dmn_8<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result,
  typename SWAP_COND<D4, T1, T2, LENGTH_4>::Result,
  typename SWAP_COND<D5, T1, T2, LENGTH_5>::Result,
  typename SWAP_COND<D6, T1, T2, LENGTH_6>::Result,
  typename SWAP_COND<D7, T1, T2, LENGTH_7>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6, class D7, class D8,  class T1, class T2, int N>
 struct SWAP_COND<dmn_9< D0, D1, D2, D3, D4, D5, D6, D7, D8>,  T1, T2, N> {

 const static int LENGTH_0 = N;
 const static int LENGTH_1 = N + TL::NumberOf<typename D0::this_type, T1>::value;
 const static int LENGTH_2 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value;
 const static int LENGTH_3 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value;
 const static int LENGTH_4 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value;
 const static int LENGTH_5 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value;
 const static int LENGTH_6 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value;
 const static int LENGTH_7 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value + TL::NumberOf<typename D6::this_type, T1>::value;
 const static int LENGTH_8 = N + TL::NumberOf<typename D0::this_type, T1>::value + TL::NumberOf<typename D1::this_type, T1>::value + TL::NumberOf<typename D2::this_type, T1>::value + TL::NumberOf<typename D3::this_type, T1>::value + TL::NumberOf<typename D4::this_type, T1>::value + TL::NumberOf<typename D5::this_type, T1>::value + TL::NumberOf<typename D6::this_type, T1>::value + TL::NumberOf<typename D7::this_type, T1>::value;

typedef dmn_9<
  typename SWAP_COND<D0, T1, T2, LENGTH_0>::Result,
  typename SWAP_COND<D1, T1, T2, LENGTH_1>::Result,
  typename SWAP_COND<D2, T1, T2, LENGTH_2>::Result,
  typename SWAP_COND<D3, T1, T2, LENGTH_3>::Result,
  typename SWAP_COND<D4, T1, T2, LENGTH_4>::Result,
  typename SWAP_COND<D5, T1, T2, LENGTH_5>::Result,
  typename SWAP_COND<D6, T1, T2, LENGTH_6>::Result,
  typename SWAP_COND<D7, T1, T2, LENGTH_7>::Result,
  typename SWAP_COND<D8, T1, T2, LENGTH_8>::Result   > Result;
};




/****************************************
***           SWAP-FIRST              ***
*****************************************/



template <class dmn, class T1,class T2>
struct SWAP_FIRST
{
 typedef typename SWAP_COND<dmn, T1, T2, 0>::Result Result;
};





/****************************************
***           SWAP-ALL                ***
*****************************************/



template <class T0, class T1,class T2>
struct SWAP_ALL
{};


template <class T0, class T1,class T2>
struct SWAP_ALL<dmn_0<T0>, T1, T2> {
  typedef dmn_0<T0> Result;
};


template <class T1,class T2>
struct SWAP_ALL<dmn_0<T1>, T1, T2> {
  typedef dmn_0<T2> Result;
};


template <class T0, class T1,class T2>
struct SWAP_ALL<dmn_0<T0>, dmn_0<T1>, dmn_0<T2> > {
  typedef dmn_0<T0> Result;
};


template <class T1,class T2>
struct SWAP_ALL<dmn_0<T1>, dmn_0<T1>, dmn_0<T2> > {
  typedef dmn_0<T2> Result;
};


template <class D0,  class T1, class T2>
 struct SWAP_ALL<dmn_1< D0>, T1, T2> {
typedef dmn_1<typename SWAP_ALL<D0,T1,T2>::Result   > Result;
};

template <class D0, class D1,  class T1, class T2>
 struct SWAP_ALL<dmn_2< D0, D1>, T1, T2> {
typedef dmn_2<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2,  class T1, class T2>
 struct SWAP_ALL<dmn_3< D0, D1, D2>, T1, T2> {
typedef dmn_3<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3,  class T1, class T2>
 struct SWAP_ALL<dmn_4< D0, D1, D2, D3>, T1, T2> {
typedef dmn_4<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4,  class T1, class T2>
 struct SWAP_ALL<dmn_5< D0, D1, D2, D3, D4>, T1, T2> {
typedef dmn_5<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result,
typename SWAP_ALL<D4,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5,  class T1, class T2>
 struct SWAP_ALL<dmn_6< D0, D1, D2, D3, D4, D5>, T1, T2> {
typedef dmn_6<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result,
typename SWAP_ALL<D4,T1,T2>::Result,
typename SWAP_ALL<D5,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6,  class T1, class T2>
 struct SWAP_ALL<dmn_7< D0, D1, D2, D3, D4, D5, D6>, T1, T2> {
typedef dmn_7<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result,
typename SWAP_ALL<D4,T1,T2>::Result,
typename SWAP_ALL<D5,T1,T2>::Result,
typename SWAP_ALL<D6,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6, class D7,  class T1, class T2>
 struct SWAP_ALL<dmn_8< D0, D1, D2, D3, D4, D5, D6, D7>, T1, T2> {
typedef dmn_8<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result,
typename SWAP_ALL<D4,T1,T2>::Result,
typename SWAP_ALL<D5,T1,T2>::Result,
typename SWAP_ALL<D6,T1,T2>::Result,
typename SWAP_ALL<D7,T1,T2>::Result   > Result;
};

template <class D0, class D1, class D2, class D3, class D4, class D5, class D6, class D7, class D8,  class T1, class T2>
 struct SWAP_ALL<dmn_9< D0, D1, D2, D3, D4, D5, D6, D7, D8>, T1, T2> {
typedef dmn_9<typename SWAP_ALL<D0,T1,T2>::Result,
typename SWAP_ALL<D1,T1,T2>::Result,
typename SWAP_ALL<D2,T1,T2>::Result,
typename SWAP_ALL<D3,T1,T2>::Result,
typename SWAP_ALL<D4,T1,T2>::Result,
typename SWAP_ALL<D5,T1,T2>::Result,
typename SWAP_ALL<D6,T1,T2>::Result,
typename SWAP_ALL<D7,T1,T2>::Result,
typename SWAP_ALL<D8,T1,T2>::Result   > Result;
};




/****************************************
***           PRINT dmn_i             ***
*****************************************/



template <class T0>
struct printTL<dmn_0<T0> > {
	static void print(std::ostream &s) {
		s <<  "\t" << __PRETTY_FUNCTION__ << "\n";
	}
};


template <class D0 >
struct printTL<dmn_1<D0 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
}
};


template <class D0 , class D1 >
struct printTL<dmn_2<D0 , D1 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
}
};


template <class D0 , class D1 , class D2 >
struct printTL<dmn_3<D0 , D1 , D2 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 >
struct printTL<dmn_4<D0 , D1 , D2 , D3 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 >
struct printTL<dmn_5<D0 , D1 , D2 , D3 , D4 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 >
struct printTL<dmn_6<D0 , D1 , D2 , D3 , D4 , D5 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 >
struct printTL<dmn_7<D0 , D1 , D2 , D3 , D4 , D5 , D6 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 >
struct printTL<dmn_8<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 , class D8 >
struct printTL<dmn_9<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 , D8 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
printTL<D8>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 , class D8 , class D9 >
struct printTL<dmn_10<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 , D8 , D9 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
printTL<D8>::print(s);
printTL<D9>::print(s);
}
};





/****************************************
***           PRINT union_i           ***
*****************************************/

/*

template <class D0 >
struct printTL<union_1<D0 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
}
};


template <class D0 , class D1 >
struct printTL<union_2<D0 , D1 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
}
};


template <class D0 , class D1 , class D2 >
struct printTL<union_3<D0 , D1 , D2 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 >
struct printTL<union_4<D0 , D1 , D2 , D3 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 >
struct printTL<union_5<D0 , D1 , D2 , D3 , D4 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 >
struct printTL<union_6<D0 , D1 , D2 , D3 , D4 , D5 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 >
struct printTL<union_7<D0 , D1 , D2 , D3 , D4 , D5 , D6 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 >
struct printTL<union_8<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 , class D8 >
struct printTL<union_9<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 , D8 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
printTL<D8>::print(s);
}
};


template <class D0 , class D1 , class D2 , class D3 , class D4 , class D5 , class D6 , class D7 , class D8 , class D9 >
struct printTL<union_10<D0 , D1 , D2 , D3 , D4 , D5 , D6 , D7 , D8 , D9 > > {
static void print(std::ostream &s) {
printTL<D0>::print(s);
printTL<D1>::print(s);
printTL<D2>::print(s);
printTL<D3>::print(s);
printTL<D4>::print(s);
printTL<D5>::print(s);
printTL<D6>::print(s);
printTL<D7>::print(s);
printTL<D8>::print(s);
printTL<D9>::print(s);
}
};

*/

}


#endif
