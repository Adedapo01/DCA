#! /usr/bin/env python3.1

import os
import shutil

print("\n******************************************************** \n")
print("This will generate union_i.h files up to order N ")
print("\n******************************************************** \n")

N = 20  #int(raw_input("Maximum number of branches:"))

for_loop = "for(int i=0; i<INDEX; i++)"

dir_name    = "./union_domains/"
file_name   = "union_INDEX.h"
precompiler_name = "UNION_INDEX_H_"

union_name    = "union_INDEX"
domain_name   = "domain_INDEX"
domain_name_t = "domain_INDEX_t"

domain_typelist_name          = "domain_typelist_INDEX"
domain_typelist_name_this_type = "domain_INDEX_t::this_type"

def remove_directory_and_create_again(directory_name):
	print(os.path)
	if os.path.isdir("./" + directory_name + "/"):
		print("found directory --> ")
		shutil.rmtree(directory_name)
		print("deleted directory --> ")
	else:
		print("\n directory NOT found -->")

	os.mkdir("./" + directory_name + "/")
	print("made directory\n")

def print_template(Nb_of_templates):
	file.write("\n")		
	file.write("template<")		
	
	for k in range(0, Nb_of_templates-1):
		file.write(" typename ")
		file.write(domain_name_t.replace("INDEX", str(k)))	
		file.write(",\n\t\t ")
	
	file.write(" typename ")	
	file.write(domain_name_t.replace("INDEX", str(Nb_of_templates-1)))	
	file.write(">\n")

def print_typelist(Nb_of_typelists):

	for k in range(0, Nb_of_typelists):
		file.write("typedef typename ")
		file.write(domain_typelist_name_this_type.replace("INDEX", str(k)))	
		file.write(" ")
		file.write(domain_typelist_name.replace("INDEX", str(k)))
		file.write(";\n\t")

	file.write("\n\t")		
	file.write("typedef ")		

	for k in range(0, Nb_of_typelists-1):
		file.write("typename Append<")
		file.write(domain_typelist_name.replace("INDEX", str(k)))	
		file.write(", ")

	file.write(domain_typelist_name.replace("INDEX", str(Nb_of_typelists-1)))

	for k in range(0, Nb_of_typelists-1):
		file.write(">::Result ")

	file.write(" this_type;")

def print_operator():
	file.write("\t")
	file.write("int operator()(int l);\n")


remove_directory_and_create_again(dir_name)

for n in range(1, N+1):
	
	file_name_new = file_name.replace("INDEX",str(n))
	file_name_new = dir_name + file_name_new
	print "\t --> Writing to file: %s" % file_name_new
  
	file = open(file_name_new, 'w')
 
	file.write("//-*-C++-*-\n\n")
	file.write("/* \n * \t This is a C++ file generated by write_union_domains.py \n *")
	
	file.write("\n * \t author: Peter Staar  \n */ \n\n\n")
	
	file.write("#ifndef ")
	file.write(precompiler_name.replace("INDEX",str(n)))
	file.write("\n")
	file.write("#define ")
	file.write(precompiler_name.replace("INDEX",str(n)))
	file.write("\n\n")
	
	file.write("#include \"domain.h\"   \n")
	file.write("#include \"type_list.h\"   \n")
	file.write("#include \"type_list_definitions.h\"   \n")

	file.write("\n")
	file.write("using namespace TL; \n")
	file.write("\n")
	
	print_template(n)		
		
	file.write("class ")			
	file.write(union_name.replace("INDEX",str(n)))					
	file.write(" : public domain \n{\n\npublic:")									
	
	file.write("\n \n \t")
	print_typelist(n)

	file.write("\n \n \t")	
	file.write(union_name.replace("INDEX",str(n)))	
	file.write("();")	

	file.write("\n \n \t")	
	file.write("void reset(); ")	
	
	file.write("\n \n \t")
	file.write("int operator()(int l);\n")

	file.write("\nprotected:\n\n")

	for k in range(0, n):
		file.write("\t")		
		file.write(domain_name_t.replace("INDEX", str(k)))
		file.write(" ")
		file.write(domain_name.replace("INDEX", str(k)))	
		file.write(";\n")

	file.write("\n};\n\n\n")	

        # CONSTRUCTOR
	print_template(n)
	file.write(union_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_name_t.replace("INDEX", str(k)))	
		file.write(", ")
	file.write(domain_name_t.replace("INDEX", str(n-1)))
				
	file.write(">::")
	file.write(union_name.replace("INDEX",str(n)))
	file.write("():\n\tdomain(),\n\t")						
										
	for k in range(0, n-1):		
		file.write(domain_name.replace("INDEX", str(k)))	
		file.write("(),\n\t")
	file.write(domain_name.replace("INDEX", str(n-1)))							     	
	file.write("()\n")									       	   
	
	file.write("{\n")

	file.write("\n")
	file.write("\tsize = ")
	for k in range(0, n-1):		
		file.write(domain_name.replace("INDEX", str(k)))	
		file.write(".get_size() + ")
	file.write(domain_name.replace("INDEX", str(n-1)))							     	
	file.write(".get_size();\n\t")							       	   

	file.write("\n")

	file.write("\tbranch_domain_sizes.push_back(size);\n")
	file.write("\tleaf_domain_sizes.push_back(size);\n")

	file.write("}\n")

# 	# void reset()
	print_template(n)
	file.write("void ")
	file.write(union_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_name_t.replace("INDEX", str(k)))	
		file.write(", ")
	file.write(domain_name_t.replace("INDEX", str(n-1)))
				
	file.write(">::reset()\n{\n")						

	file.write("domain::reset();\n\n")	

	for k in range(0, n):
		file.write(domain_name.replace("INDEX", str(k)))
		file.write(".reset();\n")
	file.write("\n")

	file.write("\n")
	file.write("\tsize = ")
	for k in range(0, n-1):		
		file.write(domain_name.replace("INDEX", str(k)))	
		file.write(".get_size() + ")
	file.write(domain_name.replace("INDEX", str(n-1)))							     	
	file.write(".get_size();\n\t")							       	   

	file.write("\n")

	file.write("branch_domain_sizes.resize(0);\n")
	file.write("branch_domain_sizes.push_back(size);\n\n")

	file.write("leaf_domain_sizes.resize(0);\n")
	file.write("leaf_domain_sizes.push_back(size);\n")

	file.write("}\n")


# 	# void reset()
	print_template(n)
	file.write("int ")
	file.write(union_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_name_t.replace("INDEX", str(k)))	
		file.write(", ")
	file.write(domain_name_t.replace("INDEX", str(n-1)))
				
	file.write(">::operator()(int l)\n{\n")	
	file.write("\t assert(l>=0 && l<size);\n")
	file.write("\t return l;\n")
	file.write("}\n")

	file.write("\n#endif\n")
