#! /usr/bin/env python3.1

import os
import shutil


print("\n******************************************************** \n")
print("This will generate dmn_i.h files up to order N ")
print("\n******************************************************** \n")

N     = 20  #int(raw_input("Maximum number of branches:"))
MAX_N = 100  # max number of subdomains

for_loop = "for(int i=0; i<INDEX; i++)"

dir_name    = "./product_domains/"
file_name   = "dmn_INDEX.h"
precompiler_name = "DMN_INDEX_H_"

domain_list_name  = "domain_list_INDEX"
domain_name       = "dmn_INDEX"
branch_name       = "branch_iINDEX"
index_name        = "sbdmn_iINDEX"
dmn_list_name	  = "dmn_list_INDEX"
domain_typelist_name          = "domain_typelist_INDEX"
domain_typelist_name_this_type = "domain_list_INDEX::this_type"


assert_string_1 = "  assert(branch_domain_sizes.size() == INDEX);"
assert_string_2 = "  assert(branch_iINDEX >= 0 && branch_iINDEX < branch_domain_sizes[INDEX]); "
#assert_string_2 = "  assert(branch_iINDEX < branch_domain_sizes[INDEX]); "

assert_string_3 = "  assert(leaf_domain_sizes.size() == INDEX);"
assert_string_4 = "  assert(sbdmn_iINDEX >= 0 && sbdmn_iINDEX < leaf_domain_sizes[INDEX]); "
#assert_string_4 = "  assert(sbdmn_iINDEX < leaf_domain_sizes[INDEX]); "

branch_index = "branch_domain_sizes[INDEX1]*(branch_iINDEX2 "
sbdmn_index  = "leaf_domain_sizes[INDEX1]*(sbdmn_iINDEX2"

leaf_domain_step_index   = " + leaf_domain_steps[INDEX]*sbdmn_iINDEX"
branch_domain_step_index = " + branch_domain_steps[INDEX]*branch_iINDEX"

def print_template(Nb_of_templates):
	file.write("\n")		
	file.write("template<")		
	
	for k in range(0, Nb_of_templates-1):
		file.write(" typename ")
		file.write(domain_list_name.replace("INDEX", str(k)))	
		file.write(",\n\t\t ")
	
	file.write(" typename ")	
	file.write(domain_list_name.replace("INDEX", str(Nb_of_templates-1)))	
	file.write(">\n")

def print_typelist(Nb_of_typelists):
	for k in range(0, Nb_of_typelists):
		file.write("typedef typename ")
		file.write(domain_typelist_name_this_type.replace("INDEX", str(k)))	
		file.write(" ")
		file.write(domain_typelist_name.replace("INDEX", str(k)))
		file.write(";\n\t")

	file.write("\n\t")		
	file.write("typedef ")		

	for k in range(0, Nb_of_typelists-1):
		file.write("typename Append<")
		file.write(domain_typelist_name.replace("INDEX", str(k)))	
		file.write(", ")

	file.write(domain_typelist_name.replace("INDEX", str(Nb_of_typelists-1)))

	for k in range(0, Nb_of_typelists-1):
		file.write(">::Result ")

	file.write(" this_type;")

def print_operator(name_of_args, Nb_of_args):
	file.write("\t")
	file.write("int operator()(")
	for k in range(0, Nb_of_args-1):
		file.write("int ")		
		file.write(name_of_args.replace("INDEX",str(k)))
		file.write(", ")
	file.write("int ")		
	file.write(name_of_args.replace("INDEX",str(Nb_of_args-1)))
	file.write(");\n")

def remove_directory_and_create_again(directory_name):
	print(os.path)
	if os.path.isdir("./" + directory_name + "/"):
		print("found directory --> ")
		shutil.rmtree(directory_name)
		print("deleted directory --> ")
	else:
		print("\n directory NOT found -->")

	os.mkdir("./" + directory_name + "/")
	print("made directory\n")


remove_directory_and_create_again(dir_name)

for n in range(1, N+1):
	
	file_name_new = file_name.replace("INDEX",str(n))
	file_name_new = dir_name + file_name_new
	print "Writing to file: %s" % file_name_new
 
 
	file = open(file_name_new, 'w')
 
	file.write("//-*-C++-*-\n\n")
	
	file.write("#ifndef ")
	file.write(precompiler_name.replace("INDEX",str(n)))
	file.write("\n")
	file.write("#define ")
	file.write(precompiler_name.replace("INDEX",str(n)))
	file.write("\n\n")
	
	
	file.write("#include <sys/time.h> \n")
	file.write("#include <iostream>   \n")
	file.write("#include <vector>     \n")                                                        
	file.write("#include <string>     \n")
	file.write("#include <assert.h>   \n")

	file.write("#include \"domain.h\"   \n")
	file.write("#include \"type_list.h\"   \n")
	file.write("#include \"type_list_definitions.h\"   \n")

	file.write("\n")
	file.write("using namespace std; \n")
	file.write("using namespace TL; \n")
	file.write("\n")
	
	file.write("/*! \n * \brief This is a C++ file generated by write_product_domains.py \n *")
	file.write("\n * This is a class that implements a tensor-indexing in a column-major way. \n *")
	file.write("\n * \author Peter Staar\n */ \n")

	print_template(n)		
		
	file.write("class ")			
	file.write(domain_name.replace("INDEX",str(n)))					
	file.write(" : public domain \n{\n\npublic:")									
	
	file.write("\n \n \t")
	print_typelist(n)

	file.write("\n \n \t")	
	file.write(domain_name.replace("INDEX",str(n)))	
	file.write("(); \n \n")	

	file.write("\n \n \t")	
	file.write("static int& dmn_size() {static int size=-1; return size;}; \n \n")	

	file.write("\n \n \t")	
	file.write("void reset(); \n \n")	
		
	print_operator(branch_name, n)
	file.write("\n")	
	
	for l in range(n+1,MAX_N+1):	
		print_operator(index_name, l)
	
	file.write("\nprotected: \n\n\t")	

	for k in range(0, n):		
		file.write(domain_list_name.replace("INDEX", str(k)))	
		file.write(" ")
		file.write(dmn_list_name.replace("INDEX", str(k)))
		file.write(";\n\t")

	file.write("\n};")

	file.write("\n\n")
	
	
	# CONSTRUCTOR
	print_template(n)
	file.write(domain_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_list_name.replace("INDEX", str(k)))	
		file.write(", ")
	file.write(domain_list_name.replace("INDEX", str(n-1)))
				
	file.write(">::")
	file.write(domain_name.replace("INDEX",str(n)))
	file.write("():\n\tdomain(),\n\t")						
										
	for k in range(0, n-1):		
		file.write(dmn_list_name.replace("INDEX", str(k)))	
		file.write("(),\n\t")
	file.write(dmn_list_name.replace("INDEX", str(n-1)))												
	file.write("()\n")															
																			
	file.write("{\n")
#       file.write("  name = __PRETTY_FUNCTION__;\n\n")
	for k in range(0, n):
		file.write("  branch_domain_sizes.push_back(")
		file.write(dmn_list_name.replace("INDEX", str(k)))	
		file.write(".get_size() );\n")																					

	file.write("\n  ")
	file.write("branch_domain_steps.resize(branch_domain_sizes.size(), 1);\n")
	file.write("for(size_t i=0; i<branch_domain_sizes.size(); i++)\n")
	file.write("  for(size_t j=0; j<i; j++)\n")
	file.write("    branch_domain_steps[i] *= branch_domain_sizes[j];\n")

	file.write("\n")
	for k in range(0, n):
		file.write("  leaf_domain_sizes.insert(leaf_domain_sizes.end(), ")
		file.write(dmn_list_name.replace("INDEX", str(k)))	
		file.write(".get_leaf_domain_sizes().begin(), ")	
		file.write(dmn_list_name.replace("INDEX", str(k)))
		file.write(".get_leaf_domain_sizes().end() );\n")

	file.write("\n  ")
	file.write("leaf_domain_steps.resize(leaf_domain_sizes.size(), 1);\n")
	file.write("for(size_t i=0; i<leaf_domain_sizes.size(); i++)\n")
	file.write("  for(size_t j=0; j<i; j++)\n")
	file.write("    leaf_domain_steps[i] *= leaf_domain_sizes[j];\n")

	file.write("\n  ")
	file.write("size = 1;\n\n")
	file.write(for_loop.replace("INDEX", str(k+1)))
	file.write("\n\t  size *= branch_domain_sizes[i];")
	file.write("\n\n")

	file.write("dmn_size() = size;")
	file.write("\n")

	file.write("}\n")

	# void reset()
	print_template(n)
	file.write("void ")
	file.write(domain_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_list_name.replace("INDEX", str(k)))	
		file.write(", ")
	file.write(domain_list_name.replace("INDEX", str(n-1)))
				
	file.write(">::reset()\n{\n")						

	file.write("domain::reset();\n\n")	

	for k in range(0, n):
		file.write(dmn_list_name.replace("INDEX", str(k)))
		file.write(".reset();\n")
	file.write("\n")

	for k in range(0, n):
		file.write("  branch_domain_sizes.push_back(")
		file.write(dmn_list_name.replace("INDEX", str(k)))	
		file.write(".get_size() );\n")																					

	file.write("\n  ")
	file.write("branch_domain_steps.resize(branch_domain_sizes.size(), 1);\n")
	file.write("for(size_t i=0; i<branch_domain_sizes.size(); i++)\n")
	file.write("  for(size_t j=0; j<i; j++)\n")
	file.write("    branch_domain_steps[i] *= branch_domain_sizes[j];\n")

	file.write("\n")
	for k in range(0, n):
		file.write("  leaf_domain_sizes.insert(leaf_domain_sizes.end(), ")
		file.write(dmn_list_name.replace("INDEX", str(k)))	
		file.write(".get_leaf_domain_sizes().begin(), ")	
		file.write(dmn_list_name.replace("INDEX", str(k)))
		file.write(".get_leaf_domain_sizes().end() );\n")

	file.write("\n  ")
	file.write("leaf_domain_steps.resize(leaf_domain_sizes.size(), 1);\n")
	file.write("for(size_t i=0; i<leaf_domain_sizes.size(); i++)\n")
	file.write("  for(size_t j=0; j<i; j++)\n")
	file.write("    leaf_domain_steps[i] *= leaf_domain_sizes[j];\n")

	file.write("\n  ")
	file.write("size = 1;\n\n")
	file.write(for_loop.replace("INDEX", str(k+1)))
	file.write("\n\t  size *= branch_domain_sizes[i];")
	file.write("\n\n")

	file.write("dmn_size() = size;")
	file.write("\n")

	file.write("}\n")




	# operator() on the branches
	print_template(n)
	file.write("inline int ")
	file.write(domain_name.replace("INDEX",str(n)))
	file.write("<")
	
	for k in range(0, n-1):		
		file.write(domain_list_name.replace("INDEX", str(k)))	
		file.write(", \n\t\t  ")
	file.write(domain_list_name.replace("INDEX", str(n-1)))
				
	file.write(">::operator()(")
	for k in range(0, n-1):
		file.write("int ")		
		file.write(branch_name.replace("INDEX",str(k)))
		file.write(", \n\t\t\t\t\t\t\t\t\t ")
	file.write("int ")		
	file.write(branch_name.replace("INDEX",str(n-1)))
	file.write(")")
	
	file.write("\n{\n")
	
	file.write(assert_string_1.replace("INDEX",str(n)))
	file.write("\n")
	for k in range(0,n):
		file.write(assert_string_2.replace("INDEX",str(k)))
		file.write("\n")

	file.write("\n")
	file.write("return branch_i0")	
	for k in range(1,n):
		file.write("\n\t")
		file.write(branch_domain_step_index.replace("INDEX",str(k)))
	file.write(";")			
	
# 	file.write("\n")
# 	file.write("return \t\t\t\t    branch_i0")	
# 	for k in range(0,n-1):
# 		file.write(" + \n \t\t")
# 		file.write(branch_index.replace("INDEX1",str(k)).replace("INDEX2",str(k+1)))
# 	for k in range(0,n-1):
# 		file.write(")")
# 	file.write(";")			
										
	file.write("\n}\n")														

	

	# operator() on the indices
	for l in range(n+1, MAX_N+1):
		print_template(n)
		file.write("inline int ")
		file.write(domain_name.replace("INDEX",str(n)))
		file.write("<")
	
		for k in range(0, n-1):		
			file.write(domain_list_name.replace("INDEX", str(k)))	
			file.write(", \n\t\t  ")
		file.write(domain_list_name.replace("INDEX", str(n-1)))
				
		file.write(">::operator()(")
		
		for k in range(0, l-1):
			file.write("int ")		
			file.write(index_name.replace("INDEX",str(k)))
			file.write(", \n\t\t\t\t\t\t\t\t\t ")
		file.write("int ")		
		file.write(index_name.replace("INDEX",str(l-1)))
		file.write(")")
																			
		file.write("\n{\n")

		file.write(assert_string_3.replace("INDEX",str(l)))
		file.write("\n")
		for k in range(0,l):
			file.write(assert_string_4.replace("INDEX",str(k)))
			file.write("\n")
	
		file.write("\n")
		file.write("return sbdmn_i0")	
		for k in range(1,l):
			file.write("\n\t")
			file.write(leaf_domain_step_index.replace("INDEX",str(k)))
		file.write(";")			

# 		file.write("\n")
# 		file.write("return \t\t\t\t\t\t\t\t sbdmn_i0")	
# 		for k in range(0,l-1):
# 			file.write(" + \n \t\t")
# 			file.write(sbdmn_index.replace("INDEX1",str(k)).replace("INDEX2",str(k+1)))
# 		for k in range(0,l-1):
# 			file.write(")")
# 		file.write(";")	

		file.write("\n}\n")











	file.write("\n\n#endif\n\n") 			
	
	file.close()



















