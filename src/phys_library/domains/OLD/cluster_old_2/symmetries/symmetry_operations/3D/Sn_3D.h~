//-*-C++-*-

/*
 *      Author: peterstaar
 */

// elements of the cyclic group C_n(m)

#ifndef Sn_3D_H_
#define Sn_3D_H_

#include <cmath>
#include "group_action.h"

template<int ux, int uy, int uz, int n, int m>
class Sn_3D : public group_action<3>
{
public:

  typedef group_action<3>  base_type;
  typedef Sn_3D<axes,n,m>  this_type;

  Sn_3D(){};
  ~Sn_3D(){};

  const static double* matrix()
  {
    // rotation around an axis {ux,uy,uz} with angle th = 2*pi*n/m;

    const static double c = cos(2*M_PI*double(n)/double(m));
    const static double s = sin(2*M_PI*double(n)/double(m));

    const static double ux = double(ux)/sqrt(double(ux*ux+uy*uy+uz*uz));
    const static double uy = double(uy)/sqrt(double(ux*ux+uy*uy+uz*uz));
    const static double uz = double(uz)/sqrt(double(ux*ux+uy*uy+uz*uz));
    
    const static double matrix[3*3] = { ux*ux + (1-ux*ux)*c, ux*uy*(1-c)+uz*s    , ux*uz*(1-c)-uy*s,
					ux*uy*(1-c)-uz*s   , uy*uy + (1-uy*uy)*c , uy*uz*(1-c)+ux*s,
					ux*uz*(1-c)+uy*s   , uy*uz*(1-c)-ux*s    , uz*uz+(1-uz*uz)*c};
    return matrix;
  }
};

#endif
