//-*-C++-*-

/*
 *      Author: peterstaar
 */

#ifndef CLUSTER_FT_MATRIX_FULL_IRREDUCIBLE_H_
#define CLUSTER_FT_MATRIX_FULL_IRREDUCIBLE_H_

#include "cluster_FT_matrix.h"
#include <complex>
#include <math.h>

using namespace std;

template<class cluster_type>
class cluster_FT_matrix<cluster_type, FULL, IRREDUCIBLE>
{
public:
  
  static std::complex<double>* get_matrix();
  static std::complex<double>* get_matrix_inverse();

  static void initialize();

};

template<class cluster_type>
std::complex<double>* cluster_FT_matrix<cluster_type, FULL, IRREDUCIBLE>::get_matrix()
{
  static std::complex<double> matrix[0];
  return matrix;
}

template<class cluster_type>
std::complex<double>* cluster_FT_matrix<cluster_type, FULL, IRREDUCIBLE>::get_matrix_inverse()
{
  static ostd::complex<double> matrix[0];
  return matrix;
}

template<class cluster_type>
void cluster_FT_matrix<cluster_type, FULL, IRREDUCIBLE>::initialize()
{
  std::complex<double>* matrix_ptr     = get_matrix();
  std::complex<double>* matrix_ptr_inv = get_matrix_inverse();

  delete [] matrix_ptr;
  matrix_ptr = new std::complex<double>[cluster_type::get_irreducible_cluster_size()*cluster_type::get_cluster_size()];
  delete [] matrix_ptr_inv;
  matrix_ptr_inv = new std::complex<double>[cluster_type::get_irreducible_cluster_size()*cluster_type::get_cluster_size()];

  std::vector<double> r;
  std::vector<double> k;

  for(int i=0; i<cluster_type::get_irreducible_cluster_size(); i++){
    for(int j=0; j<cluster_type::get_cluster_size(); j++){

      r = cluster_type::get_irreducible_r_cluster()[i];
      k = cluster_type::get_k_cluster()[j];
      
      double rk = 0.;
      for(int l=0; l<r.size(); l++)
	  rk += r[l]*k[l];

      std::complex<double> c(cos(rk),sin(rk));
      matrix_ptr[i + cluster_type::get_irreduciblecluster_size()*j] = c;

      std::complex<double> c_inv(cos(rk),-sin(rk));
      matrix_ptr[i + cluster_type::get_irreducible_cluster_size()*j] = c_inv;
    }
  }


}

#endif
