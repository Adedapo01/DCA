//-*-C++-*-

#ifndef DCA_INTERPOLATION_TP_H
#define DCA_INTERPOLATION_TP_H

namespace DCA
{
  /*!
   *  \author Peter Staar
   *  \brief  This class computes the interpolated cluster vertex.
   */
  template<typename parameters_type, typename source_k_dmn, typename target_k_dmn>
  class interpolation_tp : public interpolation_routines<parameters_type, source_k_dmn, target_k_dmn>
  {
#include "type_definitions.h"

    typedef typename parameters_type::profiler_type    profiler_type;
    typedef typename parameters_type::concurrency_type concurrency_type;

    typedef typename source_k_dmn::parameter_type::dual_type source_r_cluster_type;

    typedef dmn_0<centered_cluster_domain<source_r_cluster_type> >  r_centered_dmn;

    typedef dmn_3<nu, nu, r_centered_dmn>    nu_nu_r_centered;
    typedef dmn_4<nu, nu, r_centered_dmn, w> nu_nu_r_centered_w;

    typedef double              scalar_type;
    typedef source_k_dmn        K_dmn_t;
    typedef target_k_dmn        k_dmn_t;
    typedef dmn_3<b,b,w_VERTEX> p_dmn_t;

  public:

    interpolation_tp(parameters_type& parameters_ref);
    ~interpolation_tp();

  private:

  private:

    parameters_type&  parameters;
    concurrency_type& concurrency;
  };

  template<typename parameters_type, typename source_k_dmn, typename target_k_dmn>
  interpolation_tp<parameters_type, source_k_dmn, target_k_dmn>::interpolation_tp(parameters_type& parameters_ref):
    interpolation_routines<parameters_type, source_k_dmn, target_k_dmn>(parameters_ref),

    parameters(parameters_ref),
    concurrency(parameters.get_concurrency())
  {}

  template<typename parameters_type, typename source_k_dmn, typename target_k_dmn>
  interpolation_tp<parameters_type, source_k_dmn, target_k_dmn>::~interpolation_tp()
  {}

  

}

#endif
