//-*-C++-*-

/*
 *      Author: Peter Staar
 */


#ifndef FEYNMAN_EXPANSION_ORDER_DOMAIN_H_
#define FEYNMAN_EXPANSION_ORDER_DOMAIN_H_


template<int MAX_ORDER_SQUARED>
class Feynman_expansion_order_domain 
{
public:

  typedef int element_type;

public:

  static int                 get_size();
  static std::vector<int>& get_elements();

private:

  static std::vector<int>& initialize_elements();
};

template<int MAX_ORDER_SQUARED>
int Feynman_expansion_order_domain<MAX_ORDER_SQUARED>::get_size()  
{
  const static int size = MAX_ORDER_SQUARED;
  return size;
}

template<int MAX_ORDER_SQUARED>
std::vector<int>& Feynman_expansion_order_domain<MAX_ORDER_SQUARED>::get_elements()
{
  static std::vector<int>& v = initialize_elements();
  return v;
}

template<int MAX_ORDER_SQUARED>
std::vector<int>& Feynman_expansion_order_domain<MAX_ORDER_SQUARED>::initialize_elements()
{
  static std::vector<int> v(get_size());

  for(int i=0; i<get_size(); i++)
    v[i] = i;

  return v;
}

#endif
