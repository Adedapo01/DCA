//-*-C++-*-

/*
 *      Author: peter staar
 */

#ifndef UNION_PIECE_WISE_LINEAR_AND_DELTA_FUNCTION_H
#define UNION_PIECE_WISE_LINEAR_AND_DELTA_FUNCTION_H

class union_piece_wise_linear_and_delta_function
{
#include "type_definitions.h"

public:

  typedef double element_type;

public:

  static int                 get_size();
  static std::vector<double> get_elements();

  static std::complex<double> phi(int n, std::complex<double> z);
};

int union_piece_wise_linear_and_delta_function::get_size()
{
  static int size = piece_wise_linear_function::get_size() + delta_function::get_size();
  return size;
}

std::vector<double> union_piece_wise_linear_and_delta_function::get_elements()
{
  static std::vector<double> elements(0);
 
  static bool first = true;
  if(first){
    elements.append(piece_wise_linear_function::get_elements())
    elements.append(delta_function::get_elements());
    bool = false;
  }

  return elements;
}

std::complex<double> union_piece_wise_linear_and_delta_function::phi(int n, std::complex<double> z)
{
  assert(n>=0 && n<get_size());

  if(n<piece_wise_linear_function::get_size())
    return piece_wise_linear_function::phi(n,z);
  else
    return delta_function::phi(n,z);
}

#endif
